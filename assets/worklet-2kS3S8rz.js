var l=Object.defineProperty;var m=(s,r,n)=>r in s?l(s,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[r]=n;var o=(s,r,n)=>(m(s,typeof r!="symbol"?r+"":r,n),n);(function(){"use strict";var s=(i=>(i.AudioFrame="AUDIO_FRAME",i.SpeechStart="SPEECH_START",i.VADMisfire="VAD_MISFIRE",i.SpeechEnd="SPEECH_END",i.SpeechStop="SPEECH_STOP",i))(s||{});class r{constructor(a){o(this,"inputBuffer");o(this,"process",a=>{const t=[];for(const e of a)for(this.inputBuffer.push(e);this.hasEnoughDataForFrame();){const p=this.generateOutputFrame();t.push(p)}return t});this.options=a,a.nativeSampleRate<16e3&&console.error("nativeSampleRate is too low. Should have 16000 = targetSampleRate <= nativeSampleRate"),this.inputBuffer=[]}hasEnoughDataForFrame(){return this.inputBuffer.length*this.options.targetSampleRate/this.options.nativeSampleRate>=this.options.targetFrameSize}generateOutputFrame(){const a=new Float32Array(this.options.targetFrameSize);let t=0,e=0;for(;t<this.options.targetFrameSize;){let p=0,u=0;for(;e<Math.min(this.inputBuffer.length,(t+1)*this.options.nativeSampleRate/this.options.targetSampleRate);){const h=this.inputBuffer[e];h!==void 0&&(p+=h,u++),e++}a[t]=p/u,t++}return this.inputBuffer=this.inputBuffer.slice(e),a}}class n extends AudioWorkletProcessor{constructor(t){super();o(this,"resampler",null);o(this,"_initialized",!1);o(this,"_stopProcessing",!1);o(this,"options");o(this,"init",async()=>{this.resampler=new r({nativeSampleRate:sampleRate,targetSampleRate:16e3,targetFrameSize:this.options.frameSamples}),this._initialized=!0});this.options=t.processorOptions,this.port.onmessage=e=>{e.data.message===s.SpeechStop&&(this._stopProcessing=!0)},this.init()}process(t){if(this._stopProcessing||!this.resampler)return!1;const e=t[0][0];if(this._initialized&&e instanceof Float32Array){const p=this.resampler.process(e);for(const u of p)this.port.postMessage({message:s.AudioFrame,data:u.buffer},[u.buffer])}return!0}}registerProcessor("vad-helper-worklet",n)})();
